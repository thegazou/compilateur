
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '8DBB1968673D8CA1C6D8BE36DBE7C299'
    
_lr_action_items = {'{':([14,15,22,24,27,32,33,34,],[-10,-11,-12,31,-14,-13,-8,-9,]),'FLOAT':([0,12,31,],[3,3,3,]),'MUL_OP':([14,15,17,20,22,23,24,26,27,30,32,33,34,],[-10,-11,-12,29,-12,29,29,29,-14,29,-13,29,-9,]),';':([1,2,4,9,14,15,16,17,19,20,22,23,27,30,32,33,34,36,],[-3,12,-4,-5,-10,-11,-15,-12,-17,-16,-12,-6,-14,-20,-13,-8,-9,-7,]),'}':([1,2,4,9,14,15,16,17,19,20,22,23,25,27,30,32,33,34,35,36,],[-3,-1,-4,-5,-10,-11,-15,-12,-17,-16,-12,-6,-2,-14,-20,-13,-8,-9,36,-7,]),'(':([3,6,8,10,11,13,18,21,28,29,],[-18,13,13,13,-19,13,13,13,13,13,]),'NUMBER_FLOAT':([3,6,8,10,11,13,18,21,28,29,],[-18,15,15,15,-19,15,15,15,15,15,]),'$end':([1,2,4,5,9,14,15,16,17,19,20,22,23,25,27,30,32,33,34,36,],[-3,-1,-4,0,-5,-10,-11,-15,-12,-17,-16,-12,-6,-2,-14,-20,-13,-8,-9,-7,]),'IDENTIFIER':([0,3,6,8,10,11,12,13,18,21,28,29,31,],[7,-18,17,22,22,-19,7,22,22,22,22,22,7,]),'PRINT':([0,12,31,],[8,8,8,]),'ADD_OP':([3,6,8,10,11,13,14,15,17,18,20,21,22,23,24,26,27,28,29,30,32,33,34,],[-18,18,18,18,-19,18,-10,-11,-12,18,28,18,-12,28,28,28,-14,18,18,28,-13,-8,-9,]),')':([14,15,22,26,27,32,33,34,],[-10,-11,-12,32,-14,-13,-8,-9,]),'WHILE':([0,12,31,],[10,10,10,]),'=':([7,17,],[21,21,]),'INT':([0,12,31,],[11,11,11,]),'NUMBER_INT':([3,6,8,10,11,13,18,21,28,29,],[-18,14,14,14,-19,14,14,14,14,14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration_init':([6,],[16,]),'expression':([6,8,10,13,18,21,28,29,],[20,23,24,26,27,30,33,34,]),'structure':([0,12,31,],[9,9,9,]),'programme':([0,12,31,],[5,25,35,]),'statement':([0,12,31,],[2,2,2,]),'assignation':([0,6,12,31,],[4,19,4,4,]),'type':([0,12,31,],[6,6,6,]),'declaration':([0,12,31,],[1,1,1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser.py',13),
  ('statement -> declaration','statement',1,'p_statement','parser.py',17),
  ('statement -> assignation','statement',1,'p_statement','parser.py',18),
  ('statement -> structure','statement',1,'p_statement','parser.py',19),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser.py',23),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parser.py',27),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser.py',31),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser.py',32),
  ('expression -> NUMBER_INT','expression',1,'p_expression_num_or_var','parser.py',36),
  ('expression -> NUMBER_FLOAT','expression',1,'p_expression_num_or_var','parser.py',37),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser.py',38),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser.py',42),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser.py',46),
  ('declaration -> type declaration_init','declaration',2,'p_declaration','parser.py',50),
  ('declaration_init -> expression','declaration_init',1,'p_delaration_init','parser.py',55),
  ('declaration_init -> assignation','declaration_init',1,'p_delaration_init','parser.py',56),
  ('type -> FLOAT','type',1,'p_type','parser.py',60),
  ('type -> INT','type',1,'p_type','parser.py',61),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser.py',65),
]
