
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = 'A96CFDC37504A0D5F0B043AC67BECFEE'
    
_lr_action_items = {'RETURN':([15,20,],[24,24,]),';':([15,20,21,22,23,24,26,28,36,39,40,41,42,43,44,46,],[18,18,-19,-22,34,35,-24,-25,45,-16,-17,-18,-24,-20,-21,-23,]),'SUM_OP':([15,19,20,26,28,40,],[20,31,20,-24,-25,31,]),'NUMBER':([15,20,24,29,30,31,32,],[28,28,28,28,28,28,28,]),'INT':([0,1,2,3,8,12,13,16,17,18,25,27,33,34,35,45,47,],[5,-3,-5,-4,5,-2,-6,-9,-10,-12,-7,-8,-31,-11,-14,-15,-13,]),'CHAR':([0,1,2,3,8,12,13,16,17,18,25,27,33,34,35,45,47,],[7,-3,-5,-4,7,-2,-6,-9,-10,-12,-7,-8,-31,-11,-14,-15,-13,]),'=':([19,26,28,],[30,-24,-25,]),'MUL_OP':([19,26,28,40,],[32,-24,-25,32,]),'(':([13,26,],[14,37,]),')':([14,37,],[15,46,]),'$end':([1,2,3,6,8,12,13,16,17,18,25,27,33,34,35,45,47,],[-3,-5,-4,0,-1,-2,-6,-9,-10,-12,-7,-8,-31,-11,-14,-15,-13,]),'}':([21,22,26,28,38,39,40,41,42,43,44,46,],[-19,-22,-24,-25,47,-16,-17,-18,-24,-20,-21,-23,]),'ID':([4,5,7,9,10,11,15,20,24,29,30,31,32,],[-28,-27,-30,-29,13,-26,26,26,26,26,26,42,42,]),'BOOL':([0,1,2,3,8,12,13,16,17,18,25,27,33,34,35,45,47,],[9,-3,-5,-4,9,-2,-6,-9,-10,-12,-7,-8,-31,-11,-14,-15,-13,]),'FLOAT':([0,1,2,3,8,12,13,16,17,18,25,27,33,34,35,45,47,],[4,-3,-5,-4,4,-2,-6,-9,-10,-12,-7,-8,-31,-11,-14,-15,-13,]),'VOID':([0,1,2,3,8,12,13,16,17,18,25,27,33,34,35,45,47,],[11,-3,-5,-4,11,-2,-6,-9,-10,-12,-7,-8,-31,-11,-14,-15,-13,]),'{':([15,20,],[29,29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([0,8,],[1,12,]),'compound_stmt':([15,20,],[16,16,]),'return_stmt':([15,20,],[17,17,]),'fun_declaration':([0,8,],[2,2,]),'var_declaration':([0,8,],[3,3,]),'program':([0,],[6,]),'call':([15,20,24,29,30,],[22,22,22,22,41,]),'expression':([15,20,24,29,],[23,23,36,38,]),'simple_expression':([15,20,24,29,30,],[21,21,21,21,39,]),'declaration_list':([0,],[8,]),'statement':([15,20,],[25,33,]),'mutable':([15,20,24,29,30,31,32,],[19,19,19,19,40,43,44,]),'expression_stmt':([15,20,],[27,27,]),'type_specifier':([0,8,],[10,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser3.py',9),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser3.py',13),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser3.py',14),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser3.py',22),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','parser3.py',23),
  ('var_declaration -> type_specifier ID','var_declaration',2,'p_var_declaration','parser3.py',27),
  ('fun_declaration -> type_specifier ID ( ) statement','fun_declaration',5,'p_fun_declaration','parser3.py',31),
  ('statement -> expression_stmt','statement',1,'p_statement','parser3.py',35),
  ('statement -> compound_stmt','statement',1,'p_statement','parser3.py',36),
  ('statement -> return_stmt','statement',1,'p_statement','parser3.py',37),
  ('expression_stmt -> expression ;','expression_stmt',2,'p_expression_stmt','parser3.py',41),
  ('expression_stmt -> ;','expression_stmt',1,'p_expression_stmt','parser3.py',42),
  ('compound_stmt -> { expression }','compound_stmt',3,'p_compound_stmt','parser3.py',46),
  ('return_stmt -> RETURN ;','return_stmt',2,'p_return_stmt','parser3.py',50),
  ('return_stmt -> RETURN expression ;','return_stmt',3,'p_return_stmt','parser3.py',51),
  ('expression -> mutable = simple_expression','expression',3,'p_expression','parser3.py',55),
  ('expression -> mutable = mutable','expression',3,'p_expression','parser3.py',56),
  ('expression -> mutable = call','expression',3,'p_expression','parser3.py',57),
  ('expression -> simple_expression','expression',1,'p_expression','parser3.py',58),
  ('simple_expression -> mutable SUM_OP mutable','simple_expression',3,'p_simple_expression','parser3.py',65),
  ('simple_expression -> mutable MUL_OP mutable','simple_expression',3,'p_simple_expression','parser3.py',66),
  ('simple_expression -> call','simple_expression',1,'p_simple_expression','parser3.py',67),
  ('call -> ID ( )','call',3,'p_call','parser3.py',71),
  ('mutable -> ID','mutable',1,'p_mutable','parser3.py',75),
  ('mutable -> NUMBER','mutable',1,'p_mutable','parser3.py',76),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser3.py',80),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser3.py',81),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser3.py',82),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','parser3.py',83),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser3.py',84),
  ('statement -> SUM_OP statement','statement',2,'p_minus','parser3.py',88),
]
