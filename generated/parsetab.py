
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = 'B3F1D30DBFEDBAF72F9340F75353BA8E'
    
_lr_action_items = {'RETURN':([15,17,22,23,24,26,27,29,31,32,33,35,36,37,],[19,-8,-9,-10,-12,19,-17,-14,-11,-22,19,-15,-16,-13,]),'(':([13,],[14,]),')':([14,],[15,]),'VOID':([0,1,4,6,8,12,13,16,17,22,23,24,29,31,32,35,37,],[3,-4,3,-5,-3,-2,-6,-7,-8,-9,-10,-12,-14,-11,-22,-15,-13,]),'ID':([2,3,5,9,10,11,15,17,19,22,23,24,26,27,28,29,31,32,33,35,36,37,],[-26,-23,-25,-27,13,-24,21,-8,21,-9,-10,-12,21,-17,21,-14,-11,-22,21,-15,-16,-13,]),'BOOL':([0,1,4,6,8,12,13,16,17,22,23,24,29,31,32,35,37,],[2,-4,2,-5,-3,-2,-6,-7,-8,-9,-10,-12,-14,-11,-22,-15,-13,]),'}':([17,22,23,24,27,29,31,32,33,35,36,37,],[-8,-9,-10,-12,-17,-14,-11,-22,37,-15,-16,-13,]),';':([15,17,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[24,-8,29,-19,-9,-10,-12,31,24,-17,-20,-14,35,-11,-22,24,-18,-15,-16,-13,]),'=':([18,21,],[28,-21,]),'FLOAT':([0,1,4,6,8,12,13,16,17,22,23,24,29,31,32,35,37,],[5,-4,5,-5,-3,-2,-6,-7,-8,-9,-10,-12,-14,-11,-22,-15,-13,]),'CHAR':([0,1,4,6,8,12,13,16,17,22,23,24,29,31,32,35,37,],[9,-4,9,-5,-3,-2,-6,-7,-8,-9,-10,-12,-14,-11,-22,-15,-13,]),'SUM_OP':([15,17,22,23,24,26,27,29,31,32,33,35,36,37,],[26,-8,-9,-10,-12,26,-17,-14,-11,-22,26,-15,-16,-13,]),'INT':([0,1,4,6,8,12,13,16,17,22,23,24,29,31,32,35,37,],[11,-4,11,-5,-3,-2,-6,-7,-8,-9,-10,-12,-14,-11,-22,-15,-13,]),'$end':([1,4,6,7,8,12,13,16,17,22,23,24,29,31,32,35,37,],[-4,-1,-5,0,-3,-2,-6,-7,-8,-9,-10,-12,-14,-11,-22,-15,-13,]),'{':([15,17,22,23,24,26,27,29,31,32,33,35,36,37,],[27,-8,-9,-10,-12,27,-17,-14,-11,-22,27,-15,-16,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([15,26,33,],[16,32,36,]),'var_declaration':([0,4,],[1,1,]),'expression_stmt':([15,26,33,],[17,17,17,]),'declaration_list':([0,],[4,]),'simple_expression':([15,19,26,28,33,],[20,20,20,20,20,]),'fun_declaration':([0,4,],[6,6,]),'return_stmt':([15,26,33,],[23,23,23,]),'program':([0,],[7,]),'mutable':([15,19,26,28,33,],[18,18,18,18,18,]),'declaration':([0,4,],[8,12,]),'expression':([15,19,26,28,33,],[25,30,25,34,25,]),'type_specifier':([0,4,],[10,10,]),'compound_stmt':([15,26,33,],[22,22,22,]),'statement_list':([27,],[33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser3.py',9),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser3.py',13),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser3.py',14),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser3.py',18),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','parser3.py',19),
  ('var_declaration -> type_specifier ID','var_declaration',2,'p_var_declaration','parser3.py',23),
  ('fun_declaration -> type_specifier ID ( ) statement','fun_declaration',5,'p_fun_declaration','parser3.py',27),
  ('statement -> expression_stmt','statement',1,'p_statement','parser3.py',31),
  ('statement -> compound_stmt','statement',1,'p_statement','parser3.py',32),
  ('statement -> return_stmt','statement',1,'p_statement','parser3.py',33),
  ('expression_stmt -> expression ;','expression_stmt',2,'p_expression_stmt','parser3.py',37),
  ('expression_stmt -> ;','expression_stmt',1,'p_expression_stmt','parser3.py',38),
  ('compound_stmt -> { statement_list }','compound_stmt',3,'p_compound_stmt','parser3.py',42),
  ('return_stmt -> RETURN ;','return_stmt',2,'p_return_stmt','parser3.py',46),
  ('return_stmt -> RETURN expression ;','return_stmt',3,'p_return_stmt','parser3.py',47),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser3.py',51),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','parser3.py',52),
  ('expression -> mutable = expression','expression',3,'p_expression','parser3.py',56),
  ('expression -> simple_expression','expression',1,'p_expression','parser3.py',57),
  ('simple_expression -> <empty>','simple_expression',0,'p_simple_expression','parser3.py',61),
  ('mutable -> ID','mutable',1,'p_mutable','parser3.py',65),
  ('statement -> SUM_OP statement','statement',2,'p_minus','parser3.py',70),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser3.py',82),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser3.py',83),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser3.py',84),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','parser3.py',85),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser3.py',86),
]
