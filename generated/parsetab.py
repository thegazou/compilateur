
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '8DBB1968673D8CA1C6D8BE36DBE7C299'
    
_lr_action_items = {'(':([1,2,7,10,11,12,17,24,27,28,],[12,12,12,-19,-18,12,12,12,12,12,]),'PRINT':([0,19,26,],[2,2,2,]),'=':([8,22,],[24,24,]),')':([14,15,16,25,29,32,34,35,],[-12,-10,-11,32,-14,-13,-8,-9,]),'INT':([0,19,26,],[10,10,10,]),'NUMBER_INT':([1,2,7,10,11,12,17,24,27,28,],[15,15,15,-19,-18,15,15,15,15,15,]),'FLOAT':([0,19,26,],[11,11,11,]),'WHILE':([0,19,26,],[1,1,1,]),'{':([13,14,15,16,29,32,34,35,],[26,-12,-10,-11,-14,-13,-8,-9,]),'NUMBER_FLOAT':([1,2,7,10,11,12,17,24,27,28,],[16,16,16,-19,-18,16,16,16,16,16,]),'IDENTIFIER':([0,1,2,7,10,11,12,17,19,24,26,27,28,],[8,14,14,22,-19,-18,14,14,8,14,8,14,14,]),'}':([3,5,6,9,14,15,16,18,20,21,22,23,29,30,31,32,33,34,35,36,],[-4,-1,-3,-5,-12,-10,-11,-6,-17,-16,-12,-15,-14,-2,-20,-13,36,-8,-9,-7,]),'ADD_OP':([1,2,7,10,11,12,13,14,15,16,17,18,21,22,24,25,27,28,29,31,32,34,35,],[17,17,17,-19,-18,17,27,-12,-10,-11,17,27,27,-12,17,27,17,17,-14,27,-13,-8,-9,]),'$end':([3,4,5,6,9,14,15,16,18,20,21,22,23,29,30,31,32,34,35,36,],[-4,0,-1,-3,-5,-12,-10,-11,-6,-17,-16,-12,-15,-14,-2,-20,-13,-8,-9,-7,]),';':([3,5,6,9,14,15,16,18,20,21,22,23,29,31,32,34,35,36,],[-4,19,-3,-5,-12,-10,-11,-6,-17,-16,-12,-15,-14,-20,-13,-8,-9,-7,]),'MUL_OP':([13,14,15,16,18,21,22,25,29,31,32,34,35,],[28,-12,-10,-11,28,28,-12,28,-14,28,-13,28,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'structure':([0,19,26,],[9,9,9,]),'assignation':([0,7,19,26,],[3,20,3,3,]),'declaration_init':([7,],[23,]),'programme':([0,19,26,],[4,30,33,]),'expression':([1,2,7,12,17,24,27,28,],[13,18,21,25,29,31,34,35,]),'statement':([0,19,26,],[5,5,5,]),'declaration':([0,19,26,],[6,6,6,]),'type':([0,19,26,],[7,7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser.py',10),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser.py',14),
  ('statement -> declaration','statement',1,'p_statement','parser.py',18),
  ('statement -> assignation','statement',1,'p_statement','parser.py',19),
  ('statement -> structure','statement',1,'p_statement','parser.py',20),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser.py',24),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parser.py',28),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser.py',32),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser.py',33),
  ('expression -> NUMBER_INT','expression',1,'p_expression_num_or_var','parser.py',37),
  ('expression -> NUMBER_FLOAT','expression',1,'p_expression_num_or_var','parser.py',38),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser.py',39),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser.py',43),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser.py',47),
  ('declaration -> type declaration_init','declaration',2,'p_declaration','parser.py',51),
  ('declaration_init -> expression','declaration_init',1,'p_delaration_init','parser.py',65),
  ('declaration_init -> assignation','declaration_init',1,'p_delaration_init','parser.py',66),
  ('type -> FLOAT','type',1,'p_type','parser.py',70),
  ('type -> INT','type',1,'p_type','parser.py',71),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser.py',75),
]
