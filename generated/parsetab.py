
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'C8C57783C6E2D1DA6F68E7DEAE1A9857'
    
_lr_action_items = {'ADD_OP':([3,4,10,11,12,13,14,15,16,18,21,22,24,25,26,28,30,31,],[10,10,10,22,10,-9,-11,-10,22,10,-13,10,10,22,22,-7,-8,-12,]),'(':([3,4,10,12,18,22,24,],[12,12,12,12,12,12,12,]),'WHILE':([0,19,23,],[3,3,3,]),'PRINT':([0,19,23,],[4,4,4,]),'FLOAT':([0,19,23,],[5,5,5,]),'}':([2,6,8,13,14,15,16,17,20,21,26,27,28,29,30,31,32,],[-3,-4,-1,-9,-11,-10,-5,-15,-16,-13,-14,-2,-7,32,-8,-12,-6,]),'=':([7,],[18,]),'NUMBER_INT':([3,4,10,12,18,22,24,],[13,13,13,13,13,13,13,]),')':([13,14,15,21,25,28,30,31,],[-9,-11,-10,-13,31,-7,-8,-12,]),'$end':([1,2,6,8,13,14,15,16,17,20,21,26,27,28,30,31,32,],[0,-3,-4,-1,-9,-11,-10,-5,-15,-16,-13,-14,-2,-7,-8,-12,-6,]),'MUL_OP':([11,13,14,15,16,21,25,26,28,30,31,],[24,-9,-11,-10,24,-13,24,24,24,-8,-12,]),'IDENTIFIER':([0,3,4,5,9,10,12,18,19,22,23,24,],[7,14,14,17,20,14,14,14,7,14,7,14,]),'INT':([0,19,23,],[9,9,9,]),';':([2,6,8,13,14,15,16,17,20,21,26,28,30,31,32,],[-3,-4,19,-9,-11,-10,-5,-15,-16,-13,-14,-7,-8,-12,-6,]),'{':([11,13,14,15,21,28,30,31,],[23,-9,-11,-10,-13,-7,-8,-12,]),'NUMBER_FLOAT':([3,4,10,12,18,22,24,],[15,15,15,15,15,15,15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,19,23,],[1,27,29,]),'assignation':([0,19,23,],[2,2,2,]),'statement':([0,19,23,],[8,8,8,]),'structure':([0,19,23,],[6,6,6,]),'expression':([3,4,10,12,18,22,24,],[11,16,21,25,26,28,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser.py',13),
  ('statement -> assignation','statement',1,'p_statement','parser.py',17),
  ('statement -> structure','statement',1,'p_statement','parser.py',18),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser.py',22),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parser.py',26),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser.py',30),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser.py',31),
  ('expression -> NUMBER_INT','expression',1,'p_expression_num_or_var','parser.py',35),
  ('expression -> NUMBER_FLOAT','expression',1,'p_expression_num_or_var','parser.py',36),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser.py',37),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser.py',41),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser.py',45),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser.py',49),
  ('structure -> FLOAT IDENTIFIER','structure',2,'p_float','parser.py',53),
  ('structure -> INT IDENTIFIER','structure',2,'p_int','parser.py',57),
]
