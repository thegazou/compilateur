Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ; programme
Rule 3     statement -> declaration
Rule 4     statement -> assignation
Rule 5     statement -> structure
Rule 6     statement -> PRINT expression
Rule 7     structure -> WHILE expression { programme }
Rule 8     expression -> expression ADD_OP expression
Rule 9     expression -> expression MUL_OP expression
Rule 10    expression -> NUMBER_INT
Rule 11    expression -> NUMBER_FLOAT
Rule 12    expression -> IDENTIFIER
Rule 13    expression -> ( expression )
Rule 14    expression -> ADD_OP expression
Rule 15    declaration -> type declaration_init
Rule 16    declaration_init -> expression
Rule 17    declaration_init -> assignation
Rule 18    type -> FLOAT
Rule 19    type -> INT
Rule 20    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 13
)                    : 13
;                    : 2
=                    : 20
ADD_OP               : 8 14
FLOAT                : 18
IDENTIFIER           : 12 20
INT                  : 19
MUL_OP               : 9
NUMBER_FLOAT         : 11
NUMBER_INT           : 10
PRINT                : 6
WHILE                : 7
error                : 
{                    : 7
}                    : 7

Nonterminals, with rules where they appear

assignation          : 4 17
declaration          : 3
declaration_init     : 15
expression           : 6 7 8 8 9 9 13 14 16 20
programme            : 2 7 0
statement            : 1 2
structure            : 5
type                 : 15

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . declaration
    (4) statement -> . assignation
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (15) declaration -> . type declaration_init
    (20) assignation -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { programme }
    (18) type -> . FLOAT
    (19) type -> . INT

    PRINT           shift and go to state 2
    IDENTIFIER      shift and go to state 8
    WHILE           shift and go to state 1
    FLOAT           shift and go to state 11
    INT             shift and go to state 10

    structure                      shift and go to state 9
    assignation                    shift and go to state 3
    programme                      shift and go to state 4
    statement                      shift and go to state 5
    declaration                    shift and go to state 6
    type                           shift and go to state 7

state 1

    (7) structure -> WHILE . expression { programme }
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER_INT
    (11) expression -> . NUMBER_FLOAT
    (12) expression -> . IDENTIFIER
    (13) expression -> . ( expression )
    (14) expression -> . ADD_OP expression

    NUMBER_INT      shift and go to state 15
    NUMBER_FLOAT    shift and go to state 16
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 12
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 13

state 2

    (6) statement -> PRINT . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER_INT
    (11) expression -> . NUMBER_FLOAT
    (12) expression -> . IDENTIFIER
    (13) expression -> . ( expression )
    (14) expression -> . ADD_OP expression

    NUMBER_INT      shift and go to state 15
    NUMBER_FLOAT    shift and go to state 16
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 12
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 18

state 3

    (4) statement -> assignation .

    ;               reduce using rule 4 (statement -> assignation .)
    $end            reduce using rule 4 (statement -> assignation .)
    }               reduce using rule 4 (statement -> assignation .)


state 4

    (0) S' -> programme .



state 5

    (1) programme -> statement .
    (2) programme -> statement . ; programme

    $end            reduce using rule 1 (programme -> statement .)
    }               reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 19


state 6

    (3) statement -> declaration .

    ;               reduce using rule 3 (statement -> declaration .)
    $end            reduce using rule 3 (statement -> declaration .)
    }               reduce using rule 3 (statement -> declaration .)


state 7

    (15) declaration -> type . declaration_init
    (16) declaration_init -> . expression
    (17) declaration_init -> . assignation
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER_INT
    (11) expression -> . NUMBER_FLOAT
    (12) expression -> . IDENTIFIER
    (13) expression -> . ( expression )
    (14) expression -> . ADD_OP expression
    (20) assignation -> . IDENTIFIER = expression

    NUMBER_INT      shift and go to state 15
    NUMBER_FLOAT    shift and go to state 16
    IDENTIFIER      shift and go to state 22
    (               shift and go to state 12
    ADD_OP          shift and go to state 17

    declaration_init               shift and go to state 23
    expression                     shift and go to state 21
    assignation                    shift and go to state 20

state 8

    (20) assignation -> IDENTIFIER . = expression

    =               shift and go to state 24


state 9

    (5) statement -> structure .

    ;               reduce using rule 5 (statement -> structure .)
    $end            reduce using rule 5 (statement -> structure .)
    }               reduce using rule 5 (statement -> structure .)


state 10

    (19) type -> INT .

    NUMBER_INT      reduce using rule 19 (type -> INT .)
    NUMBER_FLOAT    reduce using rule 19 (type -> INT .)
    IDENTIFIER      reduce using rule 19 (type -> INT .)
    (               reduce using rule 19 (type -> INT .)
    ADD_OP          reduce using rule 19 (type -> INT .)


state 11

    (18) type -> FLOAT .

    NUMBER_INT      reduce using rule 18 (type -> FLOAT .)
    NUMBER_FLOAT    reduce using rule 18 (type -> FLOAT .)
    IDENTIFIER      reduce using rule 18 (type -> FLOAT .)
    (               reduce using rule 18 (type -> FLOAT .)
    ADD_OP          reduce using rule 18 (type -> FLOAT .)


state 12

    (13) expression -> ( . expression )
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER_INT
    (11) expression -> . NUMBER_FLOAT
    (12) expression -> . IDENTIFIER
    (13) expression -> . ( expression )
    (14) expression -> . ADD_OP expression

    NUMBER_INT      shift and go to state 15
    NUMBER_FLOAT    shift and go to state 16
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 12
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 25

state 13

    (7) structure -> WHILE expression . { programme }
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    {               shift and go to state 26
    ADD_OP          shift and go to state 27
    MUL_OP          shift and go to state 28


state 14

    (12) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 12 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 12 (expression -> IDENTIFIER .)
    {               reduce using rule 12 (expression -> IDENTIFIER .)
    ;               reduce using rule 12 (expression -> IDENTIFIER .)
    $end            reduce using rule 12 (expression -> IDENTIFIER .)
    }               reduce using rule 12 (expression -> IDENTIFIER .)
    )               reduce using rule 12 (expression -> IDENTIFIER .)


state 15

    (10) expression -> NUMBER_INT .

    ADD_OP          reduce using rule 10 (expression -> NUMBER_INT .)
    MUL_OP          reduce using rule 10 (expression -> NUMBER_INT .)
    {               reduce using rule 10 (expression -> NUMBER_INT .)
    ;               reduce using rule 10 (expression -> NUMBER_INT .)
    $end            reduce using rule 10 (expression -> NUMBER_INT .)
    }               reduce using rule 10 (expression -> NUMBER_INT .)
    )               reduce using rule 10 (expression -> NUMBER_INT .)


state 16

    (11) expression -> NUMBER_FLOAT .

    ADD_OP          reduce using rule 11 (expression -> NUMBER_FLOAT .)
    MUL_OP          reduce using rule 11 (expression -> NUMBER_FLOAT .)
    {               reduce using rule 11 (expression -> NUMBER_FLOAT .)
    ;               reduce using rule 11 (expression -> NUMBER_FLOAT .)
    $end            reduce using rule 11 (expression -> NUMBER_FLOAT .)
    }               reduce using rule 11 (expression -> NUMBER_FLOAT .)
    )               reduce using rule 11 (expression -> NUMBER_FLOAT .)


state 17

    (14) expression -> ADD_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER_INT
    (11) expression -> . NUMBER_FLOAT
    (12) expression -> . IDENTIFIER
    (13) expression -> . ( expression )
    (14) expression -> . ADD_OP expression

    NUMBER_INT      shift and go to state 15
    NUMBER_FLOAT    shift and go to state 16
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 12
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 29

state 18

    (6) statement -> PRINT expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ;               reduce using rule 6 (statement -> PRINT expression .)
    $end            reduce using rule 6 (statement -> PRINT expression .)
    }               reduce using rule 6 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 27
    MUL_OP          shift and go to state 28


state 19

    (2) programme -> statement ; . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . declaration
    (4) statement -> . assignation
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (15) declaration -> . type declaration_init
    (20) assignation -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { programme }
    (18) type -> . FLOAT
    (19) type -> . INT

    PRINT           shift and go to state 2
    IDENTIFIER      shift and go to state 8
    WHILE           shift and go to state 1
    FLOAT           shift and go to state 11
    INT             shift and go to state 10

    structure                      shift and go to state 9
    assignation                    shift and go to state 3
    programme                      shift and go to state 30
    statement                      shift and go to state 5
    declaration                    shift and go to state 6
    type                           shift and go to state 7

state 20

    (17) declaration_init -> assignation .

    ;               reduce using rule 17 (declaration_init -> assignation .)
    $end            reduce using rule 17 (declaration_init -> assignation .)
    }               reduce using rule 17 (declaration_init -> assignation .)


state 21

    (16) declaration_init -> expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ;               reduce using rule 16 (declaration_init -> expression .)
    $end            reduce using rule 16 (declaration_init -> expression .)
    }               reduce using rule 16 (declaration_init -> expression .)
    ADD_OP          shift and go to state 27
    MUL_OP          shift and go to state 28


state 22

    (12) expression -> IDENTIFIER .
    (20) assignation -> IDENTIFIER . = expression

    ADD_OP          reduce using rule 12 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 12 (expression -> IDENTIFIER .)
    ;               reduce using rule 12 (expression -> IDENTIFIER .)
    $end            reduce using rule 12 (expression -> IDENTIFIER .)
    }               reduce using rule 12 (expression -> IDENTIFIER .)
    =               shift and go to state 24


state 23

    (15) declaration -> type declaration_init .

    ;               reduce using rule 15 (declaration -> type declaration_init .)
    $end            reduce using rule 15 (declaration -> type declaration_init .)
    }               reduce using rule 15 (declaration -> type declaration_init .)


state 24

    (20) assignation -> IDENTIFIER = . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER_INT
    (11) expression -> . NUMBER_FLOAT
    (12) expression -> . IDENTIFIER
    (13) expression -> . ( expression )
    (14) expression -> . ADD_OP expression

    NUMBER_INT      shift and go to state 15
    NUMBER_FLOAT    shift and go to state 16
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 12
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 31

state 25

    (13) expression -> ( expression . )
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    )               shift and go to state 32
    ADD_OP          shift and go to state 27
    MUL_OP          shift and go to state 28


state 26

    (7) structure -> WHILE expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . declaration
    (4) statement -> . assignation
    (5) statement -> . structure
    (6) statement -> . PRINT expression
    (15) declaration -> . type declaration_init
    (20) assignation -> . IDENTIFIER = expression
    (7) structure -> . WHILE expression { programme }
    (18) type -> . FLOAT
    (19) type -> . INT

    PRINT           shift and go to state 2
    IDENTIFIER      shift and go to state 8
    WHILE           shift and go to state 1
    FLOAT           shift and go to state 11
    INT             shift and go to state 10

    structure                      shift and go to state 9
    assignation                    shift and go to state 3
    programme                      shift and go to state 33
    statement                      shift and go to state 5
    declaration                    shift and go to state 6
    type                           shift and go to state 7

state 27

    (8) expression -> expression ADD_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER_INT
    (11) expression -> . NUMBER_FLOAT
    (12) expression -> . IDENTIFIER
    (13) expression -> . ( expression )
    (14) expression -> . ADD_OP expression

    NUMBER_INT      shift and go to state 15
    NUMBER_FLOAT    shift and go to state 16
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 12
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 34

state 28

    (9) expression -> expression MUL_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER_INT
    (11) expression -> . NUMBER_FLOAT
    (12) expression -> . IDENTIFIER
    (13) expression -> . ( expression )
    (14) expression -> . ADD_OP expression

    NUMBER_INT      shift and go to state 15
    NUMBER_FLOAT    shift and go to state 16
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 12
    ADD_OP          shift and go to state 17

    expression                     shift and go to state 35

state 29

    (14) expression -> ADD_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 14 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 14 (expression -> ADD_OP expression .)
    {               reduce using rule 14 (expression -> ADD_OP expression .)
    ;               reduce using rule 14 (expression -> ADD_OP expression .)
    $end            reduce using rule 14 (expression -> ADD_OP expression .)
    }               reduce using rule 14 (expression -> ADD_OP expression .)
    )               reduce using rule 14 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 27 ]
  ! MUL_OP          [ shift and go to state 28 ]


state 30

    (2) programme -> statement ; programme .

    $end            reduce using rule 2 (programme -> statement ; programme .)
    }               reduce using rule 2 (programme -> statement ; programme .)


state 31

    (20) assignation -> IDENTIFIER = expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ;               reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 20 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 27
    MUL_OP          shift and go to state 28


state 32

    (13) expression -> ( expression ) .

    ADD_OP          reduce using rule 13 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 13 (expression -> ( expression ) .)
    {               reduce using rule 13 (expression -> ( expression ) .)
    ;               reduce using rule 13 (expression -> ( expression ) .)
    $end            reduce using rule 13 (expression -> ( expression ) .)
    }               reduce using rule 13 (expression -> ( expression ) .)
    )               reduce using rule 13 (expression -> ( expression ) .)


state 33

    (7) structure -> WHILE expression { programme . }

    }               shift and go to state 36


state 34

    (8) expression -> expression ADD_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 8 (expression -> expression ADD_OP expression .)
    {               reduce using rule 8 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 8 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 8 (expression -> expression ADD_OP expression .)
    }               reduce using rule 8 (expression -> expression ADD_OP expression .)
    )               reduce using rule 8 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 28

  ! MUL_OP          [ reduce using rule 8 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 27 ]


state 35

    (9) expression -> expression MUL_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 9 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 9 (expression -> expression MUL_OP expression .)
    {               reduce using rule 9 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 9 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 9 (expression -> expression MUL_OP expression .)
    }               reduce using rule 9 (expression -> expression MUL_OP expression .)
    )               reduce using rule 9 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 27 ]
  ! MUL_OP          [ shift and go to state 28 ]


state 36

    (7) structure -> WHILE expression { programme } .

    ;               reduce using rule 7 (structure -> WHILE expression { programme } .)
    $end            reduce using rule 7 (structure -> WHILE expression { programme } .)
    }               reduce using rule 7 (structure -> WHILE expression { programme } .)

